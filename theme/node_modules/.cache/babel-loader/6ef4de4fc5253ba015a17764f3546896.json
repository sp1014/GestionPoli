{"ast":null,"code":"import _slicedToArray from \"C:/Users/user/Videos/FRONTTTTTT/vue/theme/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.map.js\";\nexport default {\n  data: function data() {\n    return {\n      center: {\n        lat: 52,\n        lng: 5\n      },\n      edited: null,\n      path: [{\n        lat: 53.3477,\n        lng: -6.2597\n      }, {\n        lat: 51.5008,\n        lng: -0.1224\n      }, {\n        lat: 48.8567,\n        lng: 2.3508\n      }, {\n        lat: 52.5166,\n        lng: 13.3833\n      }],\n      mvcPath: null,\n      errorMessage: null,\n      polylineGeojson: ''\n    };\n  },\n  computed: {\n    polylinePath: function polylinePath() {\n      if (!this.mvcPath) return null;\n      var path = [];\n\n      for (var j = 0; j < this.mvcPath.getLength(); j++) {\n        var point = this.mvcPath.getAt(j);\n        path.push({\n          lat: point.lat(),\n          lng: point.lng()\n        });\n      }\n\n      return path;\n    }\n  },\n  watch: {\n    polylinePath: (function (path) {\n      if (path) {\n        this.path = path;\n        this.polylineGeojson = JSON.stringify({\n          type: 'Polyline',\n          coordinates: this.path.map(function (_ref) {\n            var lat = _ref.lat,\n                lng = _ref.lng;\n            return [lng, lat];\n          })\n        }, null, 2);\n      }\n    }, 1000)\n  },\n  methods: {\n    updateCenter: function updateCenter(place) {\n      this.center = {\n        lat: place.geometry.location.lat(),\n        lng: place.geometry.location.lng()\n      };\n    },\n    updateEdited: function updateEdited(mvcPath) {\n      this.mvcPath = mvcPath;\n    },\n    handleClickForDelete: function handleClickForDelete($event) {\n      if ($event.vertex) {\n        this.$refs.polyline.$polylineObject.getPaths().getAt($event.path).removeAt($event.vertex);\n      }\n    },\n    readGeojson: function readGeojson($event) {\n      try {\n        this.polylineGeojson = $event.target.value;\n        var v = JSON.parse($event.target.value);\n        this.path = v.coordinates.map(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n              lng = _ref3[0],\n              lat = _ref3[1];\n\n          return {\n            lat: lat,\n            lng: lng\n          };\n        });\n        this.errorMessage = null;\n      } catch (err) {\n        this.errorMessage = err.message;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;AAWA;EACAA,IADA,kBACA;IACA;MACAC;QAAAC;QAAAC;MAAA,CADA;MAEAC,YAFA;MAGAC,OACA;QAAAH;QAAAC;MAAA,CADA,EAEA;QAAAD;QAAAC;MAAA,CAFA,EAGA;QAAAD;QAAAC;MAAA,CAHA,EAIA;QAAAD;QAAAC;MAAA,CAJA,CAHA;MASAG,aATA;MAUAC,kBAVA;MAWAC;IAXA;EAaA,CAfA;EAgBAC;IACAC;MACA;MACA;;MACA;QACA;QACAL;UAAAH;UAAAC;QAAA;MACA;;MACA;IACA;EATA,CAhBA;EA2BAQ;IACAD;MACA;QACA;QACA;UACAE,gBADA;UAEAC;YAAA;YAAA;YAAA;UAAA;QAFA,GAGA,IAHA,EAGA,CAHA;MAIA;IACA,CARA,EAQA,IARA;EADA,CA3BA;EAsCAC;IACAC;MACA;QACAb,kCADA;QAEAC;MAFA;IAIA,CANA;IAOAa;MACA;IACA,CATA;IAUAC,oBAVA,gCAUAC,MAVA,EAUA;MACA;QACA,+CACAC,KADA,CACAD,WADA,EAEAE,QAFA,CAEAF,aAFA;MAGA;IACA,CAhBA;IAiBAG;MACA;QACA;QACA;QACA,0BACAC,GADA,CACA;UAAA;UAAA;UAAA;;UAAA;YAAApB;YAAAC;UAAA;QAAA,CADA;QAEA;MACA,CANA,CAMA;QACA;MACA;IACA;EA3BA;AAtCA","names":["data","center","lat","lng","edited","path","mvcPath","errorMessage","polylineGeojson","computed","polylinePath","watch","type","coordinates","methods","updateCenter","updateEdited","handleClickForDelete","$event","getAt","removeAt","readGeojson","map"],"sourceRoot":"src/pages/maps/maps","sources":["polyline.vue"],"sourcesContent":["<template>\n\t<div>\n\t\t<GmapMap :center=\"center\" :zoom=\"5\" style=\"width: 100%; height: 500px\" ref=\"map\">\n\t\t\t<GmapPolyline v-if=\"path.length > 0\" :path=\"path\" :editable=\"false\" @path_changed=\"updateEdited($event)\"\n\t\t\t\t@rightclick=\"handleClickForDelete\"\n\t\t\t\tref=\"polyline\">\n\t\t\t</GmapPolyline>\n\t\t</GmapMap>\n\t</div>\n</template>\n<script>\n  export default {\n    data(){\n      return{\n        center: { lat: 52, lng: 5 },\n        edited: null,\n        path: [\n          { lat:53.3477, lng:-6.2597 },\n          { lat:51.5008, lng:-0.1224 },\n          { lat:48.8567, lng:2.3508 },\n          { lat:52.5166, lng:13.3833 },\n        ],\n        mvcPath: null,\n        errorMessage: null,\n        polylineGeojson: '',\n      };\n    },\n    computed: {\n      polylinePath: function () {\n        if (!this.mvcPath) return null;\n        let path = [];\n        for (let j=0; j<this.mvcPath.getLength(); j++) {\n          let point = this.mvcPath.getAt(j);\n          path.push({ lat: point.lat(), lng: point.lng() });\n        }\n        return path;\n      },\n    },\n    watch: {\n      polylinePath:(function (path) {\n        if (path) {\n          this.path = path;\n          this.polylineGeojson = JSON.stringify({\n            type: 'Polyline',\n            coordinates: this.path.map(({ lat, lng }) => [lng, lat])\n          }, null, 2);\n        }\n      }, 1000)\n    },\n    methods: {\n      updateCenter: function (place) {\n        this.center = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng(),\n        };\n      },\n      updateEdited: function (mvcPath) {\n        this.mvcPath = mvcPath;\n      },\n      handleClickForDelete($event) {\n        if ($event.vertex) {\n          this.$refs.polyline.$polylineObject.getPaths()\n            .getAt($event.path)\n            .removeAt($event.vertex);\n        }\n      },\n      readGeojson: function ($event) {\n        try {\n          this.polylineGeojson = $event.target.value;\n          var v = JSON.parse($event.target.value);\n          this.path = v.coordinates\n            .map(([lng, lat]) => ({ lat, lng }));\n          this.errorMessage = null;\n        } catch (err) {\n          this.errorMessage = err.message;\n        }\n      }\n    }\n  };\n</script>"]},"metadata":{},"sourceType":"module"}