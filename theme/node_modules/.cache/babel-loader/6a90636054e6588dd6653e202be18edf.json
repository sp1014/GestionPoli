{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nexport function configureFakeBackend() {\n  var users = [{\n    id: 1,\n    username: 'test',\n    password: 'test',\n    firstName: 'Test',\n    lastName: 'User'\n  }];\n  var realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          // get parameters from post request\n          var params = JSON.parse(opts.body); // find if any user matches login credentials\n\n          var filteredUsers = users.filter(function (user) {\n            return user.username === params.username && user.password === params.password;\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            var user = filteredUsers[0];\n            var responseJson = {\n              id: user.id,\n              username: user.username,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              token: 'fake-jwt-token'\n            };\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(responseJson));\n              }\n            });\n          } else {\n            // else return error\n            reject('Username or password is incorrect');\n          }\n\n          return;\n        } // get users\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n            resolve({\n              ok: true,\n              text: function text() {\n                return Promise.resolve(JSON.stringify(users));\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n\n          return;\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        });\n      }, 500);\n    });\n  };\n}","map":{"version":3,"names":["configureFakeBackend","users","id","username","password","firstName","lastName","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","filteredUsers","filter","user","length","responseJson","token","ok","text","stringify","headers","Authorization","then","response"],"sources":["C:/Users/user/Videos/FRONTTTTTT/vue/theme/src/_helpers/fake-backend.js"],"sourcesContent":["export function configureFakeBackend() {\n    let users = [{ id: 1, username: 'test', password: 'test', firstName: 'Test', lastName: 'User' }];\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(() => {\n\n                // authenticate\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username && user.password === params.password;\n                    });\n\n                    if (filteredUsers.length) {\n                        // if login details are valid return user details and fake jwt token\n                        let user = filteredUsers[0];\n                        let responseJson = {\n                            id: user.id,\n                            username: user.username,\n                            firstName: user.firstName,\n                            lastName: user.lastName,\n                            token: 'fake-jwt-token'\n                        };\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(responseJson)) });\n                    } else {\n                        // else return error\n                        reject('Username or password is incorrect');\n                    }\n\n                    return;\n                }\n\n                // get users\n                if (url.endsWith('/users') && opts.method === 'GET') {\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n                    if (opts.headers && opts.headers.Authorization === 'Bearer fake-jwt-token') {\n                        resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(users)) });\n                    } else {\n                        // return 401 not authorised if token is null or invalid\n                        reject('Unauthorised');\n                    }\n\n                    return;\n                }\n\n                // pass through any requests not handled above\n                realFetch(url, opts).then(response => resolve(response));\n\n            }, 500);\n        });\n    };\n}"],"mappings":";;;;AAAA,OAAO,SAASA,oBAAT,GAAgC;EACnC,IAAIC,KAAK,GAAG,CAAC;IAAEC,EAAE,EAAE,CAAN;IAASC,QAAQ,EAAE,MAAnB;IAA2BC,QAAQ,EAAE,MAArC;IAA6CC,SAAS,EAAE,MAAxD;IAAgEC,QAAQ,EAAE;EAA1E,CAAD,CAAZ;EACA,IAAIC,SAAS,GAAGC,MAAM,CAACC,KAAvB;;EACAD,MAAM,CAACC,KAAP,GAAe,UAAUC,GAAV,EAAeC,IAAf,EAAqB;IAChC,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;MACpC;MACAC,UAAU,CAAC,YAAM;QAEb;QACA,IAAIL,GAAG,CAACM,QAAJ,CAAa,qBAAb,KAAuCL,IAAI,CAACM,MAAL,KAAgB,MAA3D,EAAmE;UAC/D;UACA,IAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWT,IAAI,CAACU,IAAhB,CAAb,CAF+D,CAI/D;;UACA,IAAIC,aAAa,GAAGrB,KAAK,CAACsB,MAAN,CAAa,UAAAC,IAAI,EAAI;YACrC,OAAOA,IAAI,CAACrB,QAAL,KAAkBe,MAAM,CAACf,QAAzB,IAAqCqB,IAAI,CAACpB,QAAL,KAAkBc,MAAM,CAACd,QAArE;UACH,CAFmB,CAApB;;UAIA,IAAIkB,aAAa,CAACG,MAAlB,EAA0B;YACtB;YACA,IAAID,IAAI,GAAGF,aAAa,CAAC,CAAD,CAAxB;YACA,IAAII,YAAY,GAAG;cACfxB,EAAE,EAAEsB,IAAI,CAACtB,EADM;cAEfC,QAAQ,EAAEqB,IAAI,CAACrB,QAFA;cAGfE,SAAS,EAAEmB,IAAI,CAACnB,SAHD;cAIfC,QAAQ,EAAEkB,IAAI,CAAClB,QAJA;cAKfqB,KAAK,EAAE;YALQ,CAAnB;YAOAd,OAAO,CAAC;cAAEe,EAAE,EAAE,IAAN;cAAYC,IAAI,EAAE;gBAAA,OAAMjB,OAAO,CAACC,OAAR,CAAgBM,IAAI,CAACW,SAAL,CAAeJ,YAAf,CAAhB,CAAN;cAAA;YAAlB,CAAD,CAAP;UACH,CAXD,MAWO;YACH;YACAZ,MAAM,CAAC,mCAAD,CAAN;UACH;;UAED;QACH,CA7BY,CA+Bb;;;QACA,IAAIJ,GAAG,CAACM,QAAJ,CAAa,QAAb,KAA0BL,IAAI,CAACM,MAAL,KAAgB,KAA9C,EAAqD;UACjD;UACA,IAAIN,IAAI,CAACoB,OAAL,IAAgBpB,IAAI,CAACoB,OAAL,CAAaC,aAAb,KAA+B,uBAAnD,EAA4E;YACxEnB,OAAO,CAAC;cAAEe,EAAE,EAAE,IAAN;cAAYC,IAAI,EAAE;gBAAA,OAAMjB,OAAO,CAACC,OAAR,CAAgBM,IAAI,CAACW,SAAL,CAAe7B,KAAf,CAAhB,CAAN;cAAA;YAAlB,CAAD,CAAP;UACH,CAFD,MAEO;YACH;YACAa,MAAM,CAAC,cAAD,CAAN;UACH;;UAED;QACH,CA1CY,CA4Cb;;;QACAP,SAAS,CAACG,GAAD,EAAMC,IAAN,CAAT,CAAqBsB,IAArB,CAA0B,UAAAC,QAAQ;UAAA,OAAIrB,OAAO,CAACqB,QAAD,CAAX;QAAA,CAAlC;MAEH,CA/CS,EA+CP,GA/CO,CAAV;IAgDH,CAlDM,CAAP;EAmDH,CApDD;AAqDH"},"metadata":{},"sourceType":"module"}